import os
import logging
import pandas as pd
from sqlalchemy import create_engine
from dotenv import load_dotenv

# =====================
# 1. Config & Logging
# =====================
load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

DB_USER = os.getenv("DB_USER", "postgres")
DB_PASS = os.getenv("DB_PASS", "111204")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5433")
DB_NAME = os.getenv("DB_NAME", "retail_db")
CSV_PATH = os.getenv("CSV_PATH", "online_retail_data.csv")

# =====================
# 2. K·∫øt n·ªëi PostgreSQL
# =====================
try:
    engine = create_engine(
        f"postgresql+psycopg2://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    )
    logging.info("‚úÖ K·∫øt n·ªëi PostgreSQL th√†nh c√¥ng!")
except Exception as e:
    logging.error(f"‚ùå L·ªói k·∫øt n·ªëi PostgreSQL: {e}")
    exit(1)

# =====================
# 3. ƒê·ªçc d·ªØ li·ªáu CSV
# =====================
if not os.path.exists(CSV_PATH):
    logging.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file CSV t·∫°i {CSV_PATH}")
    exit(1)

try:
    df = pd.read_csv(CSV_PATH)
    logging.info(f"‚úÖ ƒê·ªçc file CSV th√†nh c√¥ng! S·ªë d√≤ng: {len(df)}")
except Exception as e:
    logging.error(f"‚ùå L·ªói ƒë·ªçc CSV: {e}")
    exit(1)

# =====================
# 4. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
# =====================
try:
    df = df[~df['InvoiceNo'].astype(str).str.startswith('C')]
    df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], errors='coerce')
    df = df.dropna(subset=['InvoiceDate', 'Quantity', 'UnitPrice'])
    df = df[(df['Quantity'] > 0) & (df['UnitPrice'] > 0)]
    df['Revenue'] = df['Quantity'] * df['UnitPrice']

    daily_revenue = df.groupby(df['InvoiceDate'].dt.date)['Revenue'].sum().rename('sales')
    daily_revenue.index = pd.to_datetime(daily_revenue.index)
    daily_revenue = daily_revenue.asfreq('D', fill_value=0)

    df_revenue_raw = daily_revenue.reset_index()
    df_revenue_raw.columns = ["date", "sales"]

    df_revenue_scaled = df_revenue_raw.copy()
    df_revenue_scaled["sales"] = df_revenue_scaled["sales"] / 10000

    logging.info("‚úÖ Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ho√†n t·∫•t!")
except Exception as e:
    logging.error(f"‚ùå L·ªói khi ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
    exit(1)

# =====================
# 5. ƒê·∫©y v√†o PostgreSQL
# =====================
try:
    df_revenue_raw.to_sql("daily_revenue", engine, if_exists="replace", index=False, method="multi")
    df_revenue_scaled.to_sql("daily_revenue_scaled", engine, if_exists="replace", index=False, method="multi")
    logging.info("‚úÖ ƒê√£ ƒë·∫©y d·ªØ li·ªáu v√†o PostgreSQL th√†nh c√¥ng!")
except Exception as e:
    logging.error(f"‚ùå L·ªói khi ƒë·∫©y d·ªØ li·ªáu v√†o PostgreSQL: {e}")
    exit(1)

# =====================
# 6. Ki·ªÉm tra d·ªØ li·ªáu
# =====================
try:
    df_check = pd.read_sql("SELECT * FROM daily_revenue_scaled LIMIT 10;", engine)
    logging.info("üîé 10 d√≤ng d·ªØ li·ªáu m·∫´u (scaled):")
    logging.info(f"\n{df_check}")
except Exception as e:
    logging.error(f"‚ùå L·ªói khi ƒë·ªçc l·∫°i d·ªØ li·ªáu t·ª´ PostgreSQL: {e}")

engine.dispose()
